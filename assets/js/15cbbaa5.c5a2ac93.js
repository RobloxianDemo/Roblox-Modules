"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[156],{55695:e=>{e.exports=JSON.parse('{"functions":[{"name":"UseUppercase","desc":"Return the specified target string in either upper or lower cased.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"},{"name":"Uppercase","desc":"Should we convert the string to an uppercased form?","lua_type":"boolean"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":53,"path":"src/String/init.lua"}},{"name":"Escape","desc":"Escape the specified target string from pattern characters.\\n\\tIn other words, it prefixes any special pattern characters with a `%`.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":67,"path":"src/String/init.lua"}},{"name":"Trim","desc":"Trim the whitespace from the start and end of the specified target string.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":80,"path":"src/String/init.lua"}},{"name":"TrimStart","desc":"Similar to Trim(), with the difference being that only the start of the string is trimmed.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":93,"path":"src/String/init.lua"}},{"name":"TrimEnd","desc":"Similar to Trim(), with the difference being that only the end of the string is trimmed.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":106,"path":"src/String/init.lua"}},{"name":"RemoveExcessWhitespace","desc":"Replace all whitespace with a single space from the specified target string,\\n\\t(this does not trim the string).","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":120,"path":"src/String/init.lua"}},{"name":"RemoveWhitespace","desc":"Remove all whitespace from the specified targetstring.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":133,"path":"src/String/init.lua"}},{"name":"EndsWith","desc":"Check if the specified target string ends with a certain string.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"},{"name":"EndingString","desc":"The ending string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":147,"path":"src/String/init.lua"}},{"name":"StartsWith","desc":"Check if the specified target string starts with a certain string.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"},{"name":"StartingString","desc":"The starting string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":161,"path":"src/String/init.lua"}},{"name":"Contains","desc":"Check if the specified target string contains another string.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"},{"name":"ContainedString","desc":"The contained string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":175,"path":"src/String/init.lua"}},{"name":"StringBuilder","desc":"Create a StringBuilder object that can be used to build a string.\\n\\tThis is useful when a large string needs to be concatenated.\\n\\t\\tTraditional concatenation of a string using \\"..\\" can be a performance issue,\\n\\t\\t\\tand thus StringBuilders can be used to store the pieces of the string in a table and\\n\\t\\t\\t\\tthen concatenate them all at once.","params":[],"returns":[{"desc":"Return the newly created metatable (string builder).","lua_type":"StringBuilder"}],"function_type":"static","source":{"line":190,"path":"src/String/init.lua"}},{"name":"ToCharacterArray","desc":"Return a table of all the characters in the specified target string.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the character array.","lua_type":"table"}],"function_type":"static","source":{"line":224,"path":"src/String/init.lua"}},{"name":"ToByteArray","desc":"Return a table of all the bytes of each character in the specified target string.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the byte array.","lua_type":"table"}],"function_type":"static","source":{"line":244,"path":"src/String/init.lua"}},{"name":"ByteArrayToString","desc":"Transform the array of bytes into a string.","params":[{"name":"ByteCache","desc":"The specified byte array.","lua_type":"table"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":273,"path":"src/String/init.lua"}},{"name":"EqualsIgnoreCase","desc":"Check if two strings are equal, while ignoring their case.","params":[{"name":"StringA","desc":"The primary string.","lua_type":"string"},{"name":"StringB","desc":"The primary string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":303,"path":"src/String/init.lua"}},{"name":"ToCamelCase","desc":"Return the specified target string in camelCase.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":316,"path":"src/String/init.lua"}},{"name":"ToPascalCase","desc":"Return the specified target string in PascalCase.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":333,"path":"src/String/init.lua"}},{"name":"ToSnakeCase","desc":"Return the specified target string in snake_case or SNAKE_CASE.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"},{"name":"Uppercase","desc":"","lua_type":"boolean"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":348,"path":"src/String/init.lua"}},{"name":"ToKebabCase","desc":"Return the specified target string in kebab-case or KEBAB-CASE.","params":[{"name":"TargetString","desc":"The specified target string.","lua_type":"string"},{"name":"Uppercase","desc":"","lua_type":"boolean"}],"returns":[{"desc":"Return the string.","lua_type":"string"}],"function_type":"static","source":{"line":369,"path":"src/String/init.lua"}}],"properties":[],"types":[],"name":"String","desc":"A vast collection of very useful string-related functions (adjusted for the Facilitator framework).\\nMany of these functions were ported over from JavaScript or Python that are not currently\\n\\tpresent in Lua.\\n\\nSome of the functions were ported from the following source:\\nhttps://quenty.github.io/NevermoreEngine/api/String\\n\\nStrings that only work specifically with arrays or dictionaries are marked as such\\n\\tin the documentation.\\n\\n:::info Immutability\\nAll functions (_except_ `SwapRemove`, `SwapRemoveFirstValue`, and `Lock`)\\n\\ttreat tables as immutable and will return copies of the given table(s)\\n\\t\\twith the operations performed on the copies.","source":{"line":36,"path":"src/String/init.lua"}}')}}]);
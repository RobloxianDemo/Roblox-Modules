"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4565],{32489:e=>{e.exports=JSON.parse('{"functions":[{"name":"IsPromise","desc":"Determines whether a value is a promise or not.","params":[{"name":"Value","desc":"","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":50,"path":"src/Promise/init.lua"}},{"name":"New","desc":"Constructs a new promise.\\n\\n:::warning\\nDo not yield within this callback\'s callback,\\n\\tas it will yield on the main thread. This is a performance optimization.\\n:::","params":[{"name":"Callback","desc":"","lua_type":"(Resolve: (...) -> (), Reject: (...) -> ()) -> ()?"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"static","source":{"line":66,"path":"src/Promise/init.lua"}},{"name":"Spawn","desc":"Initializes a new promise with the given function in a spawned wrapper.","params":[{"name":"Callback","desc":"","lua_type":"(Resolve: (...) -> (), Reject: (...) -> ()) -> ()?"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"static","source":{"line":89,"path":"src/Promise/init.lua"}},{"name":"Defer","desc":"Initializes a new promise with the given function in a deferred wrapper.","params":[{"name":"Callback","desc":"","lua_type":"(Resolve: (...) -> (), Reject: (...) -> ()) -> ()?"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"static","source":{"line":104,"path":"src/Promise/init.lua"}},{"name":"Resolved","desc":"Returns a resolved promise with the following values.","params":[{"name":"...","desc":"Values to resolve to.","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"static","source":{"line":119,"path":"src/Promise/init.lua"}},{"name":"Rejected","desc":"Returns a rejected promise with the following values.","params":[{"name":"...","desc":"Values to reject to.","lua_type":"any?"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"static","source":{"line":145,"path":"src/Promise/init.lua"}},{"name":"IsPending","desc":"Returns whether or not the promise is pending.","params":[],"returns":[{"desc":"True if pending, false otherwise.","lua_type":"bool"}],"function_type":"method","source":{"line":168,"path":"src/Promise/init.lua"}},{"name":"IsFulfilled","desc":"Returns whether or not the promise is fulfilled.","params":[],"returns":[{"desc":"True if fulfilled","lua_type":"bool"}],"function_type":"method","source":{"line":177,"path":"src/Promise/init.lua"}},{"name":"IsRejected","desc":"Returns whether or not the promise is rejected.","params":[],"returns":[{"desc":"True if rejected.","lua_type":"bool"}],"function_type":"method","source":{"line":186,"path":"src/Promise/init.lua"}},{"name":"Wait","desc":"Yields until the promise is complete, and errors if an error\\n\\texists, otherwise it will return the fulfilled results.","params":[],"returns":[{"desc":"","lua_type":"T"}],"function_type":"method","yields":true,"source":{"line":198,"path":"src/Promise/init.lua"}},{"name":"Yield","desc":"Yields until the promise is complete, then returns a boolean indicating\\n\\tthe result, followed by the values from the promise.","params":[],"returns":[{"desc":"","lua_type":"boolean, T"}],"function_type":"method","yields":true,"source":{"line":231,"path":"src/Promise/init.lua"}},{"name":"Resolve","desc":"Promise resolution procedure, resolves the given values.","params":[{"name":"...","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"any?\\n"}],"function_type":"method","source":{"line":261,"path":"src/Promise/init.lua"}},{"name":"Fulfill","desc":"Fulfills the promise with the value.","params":[{"name":"...","desc":"Parameters to fulfill with.","lua_type":"T"}],"returns":[{"desc":"","lua_type":"any?\\n"}],"function_type":"method","private":true,"source":{"line":342,"path":"src/Promise/init.lua"}},{"name":"Reject","desc":"Rejects the promise with the values given.","params":[{"name":"...","desc":"Parameters to reject with.","lua_type":"T"}],"returns":[{"desc":"","lua_type":"PromiseData\\n"}],"function_type":"method","source":{"line":363,"path":"src/Promise/init.lua"}},{"name":"Then","desc":"Handles if / when a promise is fulfilled / rejected. It takes up to two arguments,\\n\\tcallback functions for the success and failure cases of the Promise.\\n\\t\\tMay return the same promise if certain behavior is met.\\n\\n:::info\\nWe do not comply with 2.2.4 (OnFulfilled or OnRejected must not be called,\\n\\tat least until the execution context stack contains only platform code).\\n\\nThis means that promises may stack overflow, however, it also makes promises a lot cheaper.\\n:::\\n\\nIf / when promise is rejected,\\n\\tall respective OnRejected callbacks must execute in the order of their originating calls to then.\\n\\nIf / when promise is fulfilled,\\n\\tall respective OnFulfilled callbacks must execute in the order of their originating calls to then.","params":[{"name":"OnFulfilled","desc":"Called if / when fulfilled with parameters.","lua_type":"Function"},{"name":"OnRejected","desc":"Called if / when rejected with parameters.","lua_type":"Function"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"method","source":{"line":433,"path":"src/Promise/init.lua"}},{"name":"Tap","desc":"Akin to `Then`, though the value passed down the chain is the resolved value of the promise,\\n\\tnot the value returned from OnFulfilled or OnRejected.\\n\\nWill still yield for the result if a promise is returned, but will discard the result.","params":[{"name":"OnFulfilled","desc":"","lua_type":"Function"},{"name":"OnRejected","desc":"","lua_type":"Function"}],"returns":[{"desc":"Returns self","lua_type":"Promise<T>"}],"function_type":"method","source":{"line":467,"path":"src/Promise/init.lua"}},{"name":"Finally","desc":"Executes upon pending stop.","params":[{"name":"Callback","desc":"","lua_type":"Function"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"method","source":{"line":496,"path":"src/Promise/init.lua"}},{"name":"Catch","desc":"Catch errors from the promise.","params":[{"name":"OnRejected","desc":"","lua_type":"Function"}],"returns":[{"desc":"","lua_type":"Promise<T>"}],"function_type":"method","source":{"line":507,"path":"src/Promise/init.lua"}},{"name":"Destroy","desc":"Rejects the current promise. Utility left for Cleanser task.","params":[],"returns":[{"desc":"","lua_type":"any?\\n"}],"function_type":"method","source":{"line":514,"path":"src/Promise/init.lua"}},{"name":"GetResults","desc":"Returns the results from the promise.\\n\\n:::warning\\nThis API surface will error if the promise is still pending.\\n:::","params":[],"returns":[{"desc":"true if resolved, false otherwise.","lua_type":"boolean"}],"function_type":"method","source":{"line":527,"path":"src/Promise/init.lua"}},{"name":"ExecuteThen","desc":"","params":[{"name":"OnFulfilled","desc":"","lua_type":"Function?"},{"name":"OnRejected","desc":"","lua_type":"Function?"},{"name":"CurrentPromise","desc":"Might be nil, and if so, then we have the option to return self.","lua_type":"Promise<T>?"}],"returns":[{"desc":"","lua_type":"Promise"}],"function_type":"method","private":true,"source":{"line":565,"path":"src/Promise/init.lua"}}],"properties":[],"types":[],"name":"Promise","desc":"Promises, though without error handling as this screws with stack traces, using Roblox signals.\\n\\nThis differs a tad bit from Quenty\'s Promise, as it provides an altered structure, though it\'s\\n\\tstill relatively the same!\\n\\nForked from Quenty\'s NevermoreEngine: https://quenty.github.io/NevermoreEngine/api/Promise\\n\\nView: https://promisesaplus.com/","source":{"line":39,"path":"src/Promise/init.lua"}}')}}]);
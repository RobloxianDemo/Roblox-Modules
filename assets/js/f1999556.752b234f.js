"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[533],{28404:e=>{e.exports=JSON.parse('{"functions":[{"name":"ReadOnly","desc":"Assigns a readonly property to a table that\'d error when a nil value is indexed,\\n\\tusing `table.freeze`, disallowing further modfications to the specified table.\\nBy default, a shallow read will be performed.\\nFor deep reads, a second boolean argument must be passed to the function.\\n\\nAssign a readonly property to a table that\'d error when a nil value is indexed:\\n\\n```lua\\n\\tlocal Data: table = {\\n\\n\\t\\t[\\"Kills\\"] = 5;\\n\\t\\t[\\"Death\\"] = 2;\\n\\t\\t[\\"Experience\\"] = 150\\n\\n\\t}\\n\\n\\tData[\\"Level\\"] = 2 --\x3e Works without a problem.\\n\\n\\tprint(Data[\\"Level\\"])\\n\\n\\tData = Table.ReadOnly(Data)\\n\\tData[\\"Level\\"] = 5 --\x3e Will result in an error (cannot modify readonly table).\\n```\\n\\nRecurvisely assign a readonly property to a table that\'d error when a nil value is indexed:\\n\\n```lua\\n\\tlocal Data: table = {\\n\\n\\t\\t[\\"Statistics\\"] = {\\n\\n\\t\\t\\t[\\"Kills\\"] = 5;\\n\\t\\t\\t[\\"Death\\"] = 2;\\n\\n\\t\\t};\\n\\n\\t\\t[\\"Level\\"] = {\\n\\n\\t\\t\\t[\\"Level\\"] = 5\\n\\t\\t\\t[\\"Experience\\"] = 150\\n\\n\\t\\t}\\n\\n\\t}\\n\\n\\tData[\\"Statistics\\"][\\"Captures\\"] = 2 --\x3e Works without a problem.\\n\\tData[\\"Level\\"][\\"XP\\"] = 2 --\x3e Works without a problem.\\n\\n\\tprint(Data[\\"Statistics\\"][\\"Captures\\"])\\n\\tprint(Data[\\"Level\\"][\\"XP\\"])\\n\\n\\tData = Table.ReadOnly(Data, true)\\n\\tData[\\"Statistics\\"][\\"Captures\\"] = 5 --\x3e Will result in an error (cannot modify readonly table).\\n\\tData[\\"Level\\"][\\"XP\\"] = 5 --\x3e Will result in an error (cannot modify readonly table).\\n```","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"ShouldDeepRead","desc":"Whether or not to perform a recursive read.","lua_type":"boolean?"}],"returns":[{"desc":"Return the read-only table.","lua_type":"table"}],"function_type":"static","source":{"line":105,"path":"src/Table/init.lua"}},{"name":"Append","desc":"Concat the specified target table\'s entries with the context table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"ContextTable","desc":"The context table.","lua_type":"table"}],"returns":[{"desc":"Return the newly concatted target table.","lua_type":"table"}],"function_type":"static","source":{"line":132,"path":"src/Table/init.lua"}},{"name":"Merge","desc":"Merge the specified original table\'s entries with the secondary tables\'.","params":[{"name":"OriginalTable","desc":"The original table.","lua_type":"table"},{"name":"SecondaryTable","desc":"The secondary table.","lua_type":"table"}],"returns":[{"desc":"Return the newly created and merged table.","lua_type":"table"}],"function_type":"static","source":{"line":151,"path":"src/Table/init.lua"}},{"name":"MergeLists","desc":"Merge the specified original table\'s entries with the secondary tables\' in a list.","params":[{"name":"OriginalTable","desc":"The original table.","lua_type":"table"},{"name":"SecondaryTable","desc":"The secondary table.","lua_type":"table"}],"returns":[{"desc":"Return the newly created and merged table.","lua_type":"table"}],"function_type":"static","source":{"line":176,"path":"src/Table/init.lua"}},{"name":"RetrieveValues","desc":"Return a list of all entries\' values from within the specified target table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return the newly created table with all associated entry values.","lua_type":"table"}],"function_type":"static","source":{"line":199,"path":"src/Table/init.lua"}},{"name":"SwapKeyValue","desc":"Replace the specified target table\'s entries with their respective values.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return the newly created table with all associated key values.","lua_type":"table"}],"function_type":"static","source":{"line":218,"path":"src/Table/init.lua"}},{"name":"ToList","desc":"Convert the specified target table\'s entries to a list.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return the newly created list.","lua_type":"table"}],"function_type":"static","source":{"line":237,"path":"src/Table/init.lua"}},{"name":"Stringify","desc":"Recurvisely return every table entry from the specified target table as a string.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"Indent","desc":"The indentation power.","lua_type":"number?"},{"name":"Output","desc":"The output.","lua_type":"string?"}],"returns":[{"desc":"Return the output.","lua_type":"string"}],"function_type":"static","source":{"line":260,"path":"src/Table/init.lua"}},{"name":"Clone","desc":"Creates a clone of the given table.\\nBy default, a shallow clone will be performed.\\nFor deep clones, a second boolean argument must be passed to the function.\\n\\n:::caution No cyclical references\\nDeep clones are _not_ protected against cyclical references.\\n\\nPassing a table with cyclical references _and_ the `ShouldDeepClone` parameter set to\\n\\t`true` will result in a stack-overflow!","params":[{"name":"TargetTable","desc":"The target table to clone.","lua_type":"table"},{"name":"ShouldDeepClone","desc":"Whether or not to perform a deep clone.","lua_type":"boolean?"}],"returns":[{"desc":"Return the newly cloned table.","lua_type":"table"}],"function_type":"static","source":{"line":297,"path":"src/Table/init.lua"}},{"name":"Overwrite","desc":"Overwrite entries within the specified table with the respective entry from the context table.\\n\\n:::caution No cyclical references\\nDeep overwrites are _not_ protected against cyclical references.\\n\\nPassing a table with cyclical references _and_ the `ShouldDeepOverwrite` parameter set to\\n\\t`true` will result in a stack-overflow!","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"ContextTable","desc":"The context table.","lua_type":"table"},{"name":"ShouldDeepOverwrite","desc":"Whether or not to perform a deep overwrite.","lua_type":"boolean?"}],"returns":[{"desc":"Return the newly overwritten table.","lua_type":"table"}],"function_type":"static","source":{"line":334,"path":"src/Table/init.lua"}},{"name":"Synchronize","desc":"Synchronize every entry within the specified table with the respective entry from the context table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"ContextTable","desc":"The context table.","lua_type":"table"}],"returns":[{"desc":"Return the newly overwritten table.","lua_type":"table"}],"function_type":"static","source":{"line":367,"path":"src/Table/init.lua"}},{"name":"Reconcile","desc":"Unlike the overwrite method, this one simply replaces strings (used primarily for `ProfileService`).","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"ContextTable","desc":"The context table.","lua_type":"table"}],"returns":[{"desc":"Return the newly reconciled table.","lua_type":"table"}],"function_type":"static","source":{"line":404,"path":"src/Table/init.lua"}},{"name":"FindIndex","desc":"Find a value within the specified target table that is identical to the specified target value\\n\\tand return its index within the specified target table if found.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"TargetValue","desc":"The target value.","lua_type":"any?"}],"returns":[{"desc":"Return the specified target value from within the target table.","lua_type":"Key"}],"function_type":"static","source":{"line":431,"path":"src/Table/init.lua"}},{"name":"FindBoolean","desc":"\\tfound in the target table.\\n\\nFind a value within the specified target table that is identical to the specified target value\\n\\tand return whether or not it has been found and within the specified target table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"TargetValue","desc":"The target value.","lua_type":"any?"}],"returns":[{"desc":"Return whether or not the specified target value has been","lua_type":"boolean"}],"function_type":"static","source":{"line":450,"path":"src/Table/init.lua"}},{"name":"IsEmpty","desc":"Return whether or not the specified target table is empty.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return whether or not the target table is empty.","lua_type":"boolean"}],"function_type":"static","source":{"line":465,"path":"src/Table/init.lua"}},{"name":"Count","desc":"Count the specified target table\'s entries and return the count.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return the count of all specified target table\'s entries.","lua_type":"number"}],"function_type":"static","source":{"line":478,"path":"src/Table/init.lua"}},{"name":"Assign","desc":"Return an assigned variant of the specified target table using the specified context tables.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"...","desc":"The specified context tables.","lua_type":"table"}],"returns":[{"desc":"Return the altered target table.","lua_type":"table"}],"function_type":"static","source":{"line":499,"path":"src/Table/init.lua"}},{"name":"Map","desc":"Return a mapped variant of the specified target table using the specified function.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"Function","desc":"The specified function.","lua_type":"Function"}],"returns":[{"desc":"Return the altered target table.","lua_type":"table"}],"function_type":"static","source":{"line":522,"path":"src/Table/init.lua"}},{"name":"Reduce","desc":"Return a reduced number variant of the specified target table using the specified function.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"Function","desc":"The specified function.","lua_type":"Function"}],"returns":[{"desc":"Return the reduced result.","lua_type":"number"}],"function_type":"static","source":{"line":543,"path":"src/Table/init.lua"}},{"name":"Reverse","desc":"Return a reversed variant of the specified target table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return the newly reversed table.","lua_type":"table"}],"function_type":"static","source":{"line":562,"path":"src/Table/init.lua"}},{"name":"Randomize","desc":"Return a randomized variant of the specified target table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return the newly randomized table.","lua_type":"table"}],"function_type":"static","source":{"line":582,"path":"src/Table/init.lua"}},{"name":"Filter","desc":"Return a filtered variant of the specified target table using the specified function.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"Function","desc":"The specified function.","lua_type":"Function"}],"returns":[{"desc":"Return the newly filtered table.","lua_type":"table"}],"function_type":"static","source":{"line":608,"path":"src/Table/init.lua"}},{"name":"Take","desc":"Return the \\"count\\" number of entries from within the specified target table to clone.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"TakeCount","desc":"The specified take counter.","lua_type":"number"}],"returns":[{"desc":"Return the newly altered table.","lua_type":"table"}],"function_type":"static","source":{"line":645,"path":"src/Table/init.lua"}},{"name":"Random","desc":"Return a random entry from a specified target table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"},{"name":"TakeCount","desc":"The specified take amount.","lua_type":"number"}],"returns":[{"desc":"","lua_type":"table\\n"}],"function_type":"static","source":{"line":664,"path":"src/Table/init.lua"}},{"name":"JSONEncode","desc":"JSON Encode the specified target table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return the newly created string.","lua_type":"string?"}],"function_type":"static","source":{"line":677,"path":"src/Table/init.lua"}},{"name":"JSONDecode","desc":"JSON Decode the specified target string.","params":[{"name":"TargetString","desc":"The target string.","lua_type":"string"}],"returns":[{"desc":"Return the decoded JSON string as a table or anything.","lua_type":"DecodedString"}],"function_type":"static","source":{"line":690,"path":"src/Table/init.lua"}},{"name":"Destroy","desc":"Destroy and cleanup all entries within the specified target table.","params":[{"name":"TargetTable","desc":"The target table.","lua_type":"table"}],"returns":[{"desc":"Return a merely cleared table, resulting in a nil value.","lua_type":"nil"}],"function_type":"static","source":{"line":703,"path":"src/Table/init.lua"}}],"properties":[],"types":[],"name":"Table","desc":"A vast collection of very useful table-related functions (adjusted for the Facilitator framework).\\nMany of these functions were ported over from JavaScript or Python that are not present in Lua.\\n\\nSome of the functions were ported from these following sources:\\nhttps://quenty.github.io/NevermoreEngine/api/Table\\nhttps://sleitnick.github.io/RbxUtil/api/TableUtil\\n\\nTables that only work specifically with arrays or dictionaries are marked as such\\n\\tin the documentation.\\n\\n:::info Immutability\\nAll functions (_except_ `SwapRemove`, `SwapRemoveFirstValue`, and `Lock`)\\n\\ttreat tables as immutable and will return clones of the specified table(s)\\n\\t\\twith the operations performed on the clones.","source":{"line":30,"path":"src/Table/init.lua"}}')}}]);